<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdoNetCore.AseClient</name>
    </assembly>
    <members>
        <member name="T:AdoNetCore.AseClient.AseClientFactory">
            <summary>
            The AseClientFactory is a utility class that can decouple an application from any ASE-specific details.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseClientFactory.Instance">
            <summary>
            The singleton instance of the factory.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.#ctor">
            <summary>
            Private constructor function.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateCommand">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseCommand"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseCommand"/>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateConnection">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseConnection"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseConnection"/>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateConnectionStringBuilder">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseConnectionStringBuilder"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseConnectionStringBuilder"/>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateCommandBuilder">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateDataAdapter">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateParameter">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseParameter"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter"/>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseClientFactory.CreateDataSourceEnumerator">
            <summary>
            Instantiates a new <see cref="T:AdoNetCore.AseClient.AseDataSourceEnumerator"/>.
            </summary>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseDataSourceEnumerator"/>.</returns>
        </member>
        <member name="P:AdoNetCore.AseClient.AseClientFactory.CanCreateDataSourceEnumerator">
            <summary>
            Whether or not the <see cref="M:AdoNetCore.AseClient.AseClientFactory.CreateDataSourceEnumerator"/> method is implemented. Always False.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseClientPermission">
            <summary>
            Code Access Security is no longer recommended by Microsoft and the .NET Community. 
            
            In line with approach taken by the .NET Core community for the <b>System.Data.SqlClient.SqlClientPermission</b>, this 
            stub is provided to help clients that depend on this type to compile. However it does not provide any implementation and is not a 
            security mechanism.
            
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseClientPermissionAttribute">
            <summary>
            Code Access Security is no longer recommended by Microsoft and the .NET Community. 
            
            In line with approach taken by the .NET Core community for the <see cref="T:System.Data.SqlClient.SqlClientPermission" />, this 
            stub is provided to help clients that depend on this type to compile. However it does not provide any implementation and is not a 
            security mechanism.
            
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseCommand">
            <summary>
            Represents a Transact-SQL statement or stored procedure to execute against a SAP ASE database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.#ctor">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseCommand"/> instance.
            Note: the instance will not be initialised with an AseConnection; before use this must be supplied.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.#ctor(System.String)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseCommand"/> instance.
            Note: the instance will not be initialised with an AseConnection; before use this must be supplied.
            </summary>
            <param name="commandText">The command text to execute</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.#ctor(System.String,AdoNetCore.AseClient.AseConnection)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseCommand"/> instance.
            </summary>
            <param name="commandText">The command text to execute</param>
            <param name="connection">The connection upon which to execute</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.#ctor(System.String,AdoNetCore.AseClient.AseConnection,AdoNetCore.AseClient.AseTransaction)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseCommand"/> instance.
            </summary>
            <param name="commandText">The command text to execute</param>
            <param name="connection">The connection upon which to execute</param>
            <param name="transaction">The transaction within which to execute</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.Cancel">
            <summary>
            Tries to cancel the execution of a <see cref="T:AdoNetCore.AseClient.AseCommand" />.
            </summary>
            <remarks>
            <para>If there is nothing to cancel, nothing occurs. However, if there is a command in process, 
            and the attempt to cancel fails, no exception is generated.</para>
            <para> In some, rare, cases, if you call <see cref="M:AdoNetCore.AseClient.AseCommand.ExecuteReader" /> then call <see cref="M:AdoNetCore.AseClient.AseDataReader.Close" /> (implicitily or explicitly) 
            before calling Cancel, and then call Cancel, the cancel command will not be sent to ASE Server and 
            the result set can continue to stream after you call <see cref="M:AdoNetCore.AseClient.AseDataReader.Close" />. To avoid this, make sure that you call 
            Cancel before closing the reader or connection.</para>
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.
            </summary>
            <remarks>
            The CreateParameter method is a strongly-typed version of <see cref="M:System.Data.IDbCommand.CreateParameter" />.
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.ExecuteNonQuery">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
            <remarks>
            <para>You can use the ExecuteNonQuery to perform catalog operations (for example, querying the structure 
            of a database or creating database objects such as tables), or to change the data in a database without 
            using a DataSet by executing UPDATE, INSERT, or DELETE statements.</para>
            <para>Although the ExecuteNonQuery returns no rows, any output parameters or return values mapped to 
            parameters are populated with data.</para>
            <para> For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the 
            command. When a trigger exists on a table being inserted or updated, the return value includes the number 
            of rows affected by both the insert or update operation and the number of rows affected by the trigger or 
            triggers. For all other types of statements, the return value is -1. If a rollback occurs, the return value 
            is also -1.</para>
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Sends the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandText" /> to the <see cref="P:AdoNetCore.AseClient.AseCommand.Connection" /> and builds an <see cref="T:AdoNetCore.AseClient.AseDataReader" />.
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseDataReader" /> object.</returns>
            <remarks>
            <para>When the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandType" /> property is set to <b>StoredProcedure</b>, the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandText" /> property should be set to the 
            name of the stored procedure. The command executes this stored procedure when you call ExecuteReader.</para>
            <para>The ExecuteReader method is a strongly-typed version of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)" />.</para>
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.ExecuteReader">
            <summary>		
            Sends the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandText" /> to the <see cref="P:AdoNetCore.AseClient.AseCommand.Connection" /> and builds an <see cref="T:AdoNetCore.AseClient.AseDataReader" />.		
            </summary>		
            <returns>An <see cref="T:AdoNetCore.AseClient.AseDataReader" /> object.</returns>		
            <remarks>		
            <para>When the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandType" /> property is set to <b>StoredProcedure</b>, the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandText" /> property should be set to the 		
            name of the stored procedure. The command executes this stored procedure when you call ExecuteReader.</para>		
            <para>The ExecuteReader method is a strongly-typed version of <see cref="M:System.Data.IDbCommand.ExecuteReader" />.</para>		
            </remarks>		
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. 
            Additional columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
            <remarks>
            <para>Use the ExecuteScalar method to retrieve a single value (for example, an aggregate value) from a database. 
            This requires less code than using the <see cref="M:AdoNetCore.AseClient.AseCommand.ExecuteReader" /> method, and then performing the operations that you need to 
            generate the single value using the data returned by a <see cref="T:AdoNetCore.AseClient.AseDataReader" />.</para>
            <para>The ExecuteReader method is a strongly-typed version of <see cref="M:System.Data.IDbCommand.ExecuteReader" />.</para>
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommand.Prepare">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.CommandText">
            <summary>
            Gets or sets the Transact-SQL statement, table name or stored procedure to execute at the data source.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the <see cref="P:AdoNetCore.AseClient.AseCommand.CommandText" /> property is to be interpreted.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:AdoNetCore.AseClient.AseConnection" /> used by this instance of the AseCommand.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.NamedParameters">
            <summary>
            Governs the default behavior of the AseCommand objects associated with this connection.
            </summary>
            <remarks>
            When true then the ? syntax is not supported, and a name is expected.
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.Parameters">
            <summary>
            Gets the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> used by this instance of the AseCommand. 
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.DbParameterCollection">
            <summary>
            Gets the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> used by this instance of the AseCommand. 
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the DataRow when used by the Update method of the DbDataAdapter.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseCommandBuilder">
            <summary>
            The <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/> can be used to derive INSERT, UPDATE, and DELETE <see cref="T:AdoNetCore.AseClient.AseCommand"/> instances from a single SELECT <see cref="T:AdoNetCore.AseClient.AseCommand"/>.
            
            This can reduce the amount of SQL maintained, and make it easier to initialise an <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> for committing changes in a <see cref="T:System.Data.DataTable"/> to the source.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseCommandBuilder.AseDbTypeNameMap">
            <summary>
            A mapping of ASE type names to the AseDbType enumeration.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseCommandBuilder.AseDbTypeCodeMap">
            <summary>
            A mapping of ASE type codes to the AseDbType enumeration.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommandBuilder.#ctor">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/> instance.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommandBuilder.#ctor(AdoNetCore.AseClient.AseDataAdapter)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/> instance.
            </summary>
            <param name="adapter">The <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> to generate T-SQL statements for.</param>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommandBuilder.DataAdapter">
            <summary>
            Gets the <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> associated with this <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/>.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommandBuilder.QuotePrefix">
            <summary>
            The prefix to use when quoting identifiers.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseCommandBuilder.QuoteSuffix">
            <summary>
            The suffix to use when quoting identifiers.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommandBuilder.GetInsertCommand">
            <summary>
            The INSERT command generated from the given SELECT <see cref="P:AdoNetCore.AseClient.AseCommandBuilder.DataAdapter"/>.
            </summary>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseCommand"/> for performing INSERTs.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommandBuilder.GetDeleteCommand">
            <summary>
            The DELETE command generated from the given SELECT <see cref="P:AdoNetCore.AseClient.AseCommandBuilder.DataAdapter"/>.
            </summary>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseCommand"/> for performing DELETEs.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommandBuilder.GetUpdateCommand">
            <summary>
            The UPDATE command generated from the given SELECT <see cref="P:AdoNetCore.AseClient.AseCommandBuilder.DataAdapter"/>.
            </summary>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseCommand"/> for performing UPDATEs.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseCommandBuilder.DeriveParameters(AdoNetCore.AseClient.AseCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:AdoNetCore.AseClient.AseCommand"/> and populates the 
            <see cref="P:AdoNetCore.AseClient.AseCommand.Parameters"/> collection of the specified <see cref="T:AdoNetCore.AseClient.AseCommand"/> object.
            </summary>
            <param name="command">The <see cref="T:AdoNetCore.AseClient.AseCommand"/> referencing the stored procedure from which the parameter information 
            is to be derived. The derived parameters are added to the <see cref="P:AdoNetCore.AseClient.AseCommand.Parameters"/> collection of the <see cref="T:AdoNetCore.AseClient.AseCommand"/>.</param>
            <exception cref="T:System.InvalidOperationException">The command text is not a valid stored procedure name.</exception>
        </member>
        <member name="T:AdoNetCore.AseClient.AseConnection">
            <summary>
            Represents an open connection to an ASE Server database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AdoNetCore.AseClient.AseConnection" /> class.
            </summary>
            <remarks>
            <para>When a new instance of <see cref="T:AdoNetCore.AseClient.AseConnection" /> is created, the read/write properties are set 
            to the following initial values unless they are specifically set using their associated keywords in the 
            <see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /> property.</para>
            <para>
                <list type="table">  
                    <listheader>  
                        <term>Properties</term> 
                        <term>Initial value</term> 
                    </listheader>  
                    <item>  
                        <description><see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /></description>
                    </item>  
                    <item>  
                        <description>empty string ("")</description>
                    </item>    
                    <item>  
                        <description><see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionTimeout" /></description>
                    </item>  
                    <item>  
                        <description>30</description>
                    </item>
                    <item>  
                        <description><see cref="P:AdoNetCore.AseClient.AseConnection.Database" /></description>
                    </item>  
                    <item>  
                        <description>empty string ("")</description>
                    </item>
                </list>  
            </para>
            <para>
            </para>
            You can change the value for these properties only by using the <see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /> property.
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AdoNetCore.AseClient.AseConnection" /> class.
            </summary>
            <param name="connectionString">The connection used to open the ASE Server database.</param>
            <remarks>
            <para>When a new instance of <see cref="T:AdoNetCore.AseClient.AseConnection" /> is created, the read/write properties are set 
            to the following initial values unless they are specifically set using their associated keywords in the 
            <see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /> property.</para>
            <para>
                <list type="table">  
                    <listheader>  
                        <term>Properties</term> 
                        <term>Initial value</term> 
                    </listheader>  
                    <item>  
                        <description><see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /></description>
                    </item>  
                    <item>  
                        <description>empty string ("")</description>
                    </item>    
                    <item>  
                        <description><see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionTimeout" /></description>
                    </item>  
                    <item>  
                        <description>30</description>
                    </item>
                    <item>  
                        <description><see cref="P:AdoNetCore.AseClient.AseConnection.Database" /></description>
                    </item>  
                    <item>  
                        <description>empty string ("")</description>
                    </item>
                </list>  
            </para>
            <para>
            </para>
            You can change the value for these properties only by using the <see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /> property.
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:AdoNetCore.AseClient.AseConnection" />.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>		
            Starts a database transaction.		
            </summary>		
            <param name="isolationLevel">The isolation level under which the transaction should run.</param>		
            <returns>An object representing the new transaction.</returns>		
            <remarks>		
            <para>This command maps to the SQL Server implementation of BEGIN TRANSACTION.</para>		
            <para>You must explicitly commit or roll back the transaction using the <see cref="M:AdoNetCore.AseClient.AseTransaction.Commit" /> 		
            or <see cref="M:AdoNetCore.AseClient.AseTransaction.Rollback" /> method. To make sure that the .NET Framework Data Provider for ASE 		
            transaction management model performs correctly, avoid using other transaction management models, such as the 		
            one provided by ASE.</para>		
            <para>If you do not specify an isolation level, the default isolation level is used. To specify an isolation 		
            level with the <see cref="M:AdoNetCore.AseClient.AseConnection.BeginTransaction(System.Data.IsolationLevel)" /> method, use the overload that takes the iso parameter 		
            (<see cref="M:AdoNetCore.AseClient.AseConnection.BeginTransaction(System.Data.IsolationLevel)" />).</para>		
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open <see cref="T:AdoNetCore.AseClient.AseConnection" />.
            </summary>
            <param name="databaseName">The name of the database to use instead of the current database.</param>
            <remarks>
            The value supplied in the <i>database</i> parameter must be a valid database name. The <i>database</i> parameter 
            cannot contain a null value, an empty string, or a string with only blank characters.
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.Close">
            <summary>
            TODO - document this once transactions are supported.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.CreateCommand">
            <summary>
            Creates and returns an <see cref="T:AdoNetCore.AseClient.AseCommand" /> object associated with the <see cref="T:AdoNetCore.AseClient.AseConnection" />.
            </summary>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseCommand" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnection.Open">
            <summary>
            Opens a database connection with the property settings specified by the <see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" />.
            </summary>
            <remarks>
            The <see cref="T:AdoNetCore.AseClient.AseConnection" /> draws an open connection from the connection pool if one is available. 
            Otherwise, it establishes a new connection to an instance of ASE.
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.ConnectionString">
            <summary>
            Gets or sets the string used to open a connection to an ASE database.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
            <remarks>
            You can set the amount of time a connection waits to time out by using the <b>LoginTimeOut</b> keyword in the connection 
            string. A value of 0 indicates no limit, and should be avoided in a <see cref="P:AdoNetCore.AseClient.AseConnection.ConnectionString" /> because an attempt to 
            connect waits indefinitely.
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.Database">
            <summary>
            Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
            <remarks>
            The Database property updates dynamically. If you change the current database using a Transact-SQL 
            statement or the <see cref="M:AdoNetCore.AseClient.AseConnection.ChangeDatabase(System.String)" /> method, an informational message is sent and 
            the property is updated automatically.
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.DataSource">
            <summary>
            Gets the name of the current server
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.ServerVersion">
            <summary>
            Gets the version of the current server
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.DbProviderFactory">
            <summary>
            The DbProviderFactory available for creating child types.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.State">
            <summary>
            Indicates the state of the <see cref="T:AdoNetCore.AseClient.AseConnection" /> during the most recent network operation 
            performed on the connection.
            </summary>
            <remarks>
            Returns a <see cref="T:System.Data.ConnectionState" /> enumeration indicating the state of the 
            <see cref="T:AdoNetCore.AseClient.AseConnection" />. Closing and reopening the connection will refresh the value of State.
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.AseConnection.InfoMessage">
            <summary>
            Occurs when Adaptive Server ADO.NET Data Provider sends a warning or an informational message.
            </summary>
            <remarks>
            The event handler receives an argument of type AseInfoMessageEventArgs containing data related to this event. 
            The Errors and Message properties provide information specific to this event.
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.AseConnection.StateChange">
            <summary>
            Occurs when the state of the connection changes.
            </summary>
            <remarks>
            The event handler receives an argument of StateChangeEventArgs with data related to this event. Two StateChangeEventArgs properties 
            provide information specific to this event: CurrentState and OriginalState.
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.AseConnection.TraceEnter">
            <summary>
            Traces database activity within an application for debugging.
            </summary>
            <remarks>
            <para>Use TraceEnter and TraceExit events to hook up your own tracing method. This event is unique to an 
            instance of a connection. This allows different connections to be logged to different files. It can ignore 
            the event, or you can program it for other tracing. In addition, by using a .NET event, you can set up more 
            than one event handler for a single connection object. This enables you to log the event to both a window 
            and a file at the same time.</para>
            <para>Enable the ENABLETRACING connection property to trace Adaptive Server ADO.NET Data Provider activities. 
            It is disabled by default to allow for better performance during normal execution where tracing is not needed. 
            When this property is disabled, the TraceEnter and TraceExit events are not triggered, and tracing events are 
            not executed. You can configure ENABLETRACING in the connection string using these values: True – triggers the 
            TraceEnter and TraceExit events; and False – the default value; Adaptive Server ADO.NET Data Provider ignores 
            the TraceEnter and TraceExit events.</para>
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.AseConnection.TraceExit">
            <summary>
            Traces database activity within an application for debugging.
            </summary>
            <remarks>
            <para>Use TraceEnter and TraceExit events to hook up your own tracing method. This event is unique to an 
            instance of a connection. This allows different connections to be logged to different files. It can ignore 
            the event, or you can program it for other tracing. In addition, by using a .NET event, you can set up more 
            than one event handler for a single connection object. This enables you to log the event to both a window 
            and a file at the same time.</para>
            <para>Enable the ENABLETRACING connection property to trace Adaptive Server ADO.NET Data Provider activities. 
            It is disabled by default to allow for better performance during normal execution where tracing is not needed. 
            When this property is disabled, the TraceEnter and TraceExit events are not triggered, and tracing events are 
            not executed. You can configure ENABLETRACING in the connection string using these values: True – triggers the 
            TraceEnter and TraceExit events; and False – the default value; Adaptive Server ADO.NET Data Provider ignores 
            the TraceEnter and TraceExit events.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnection.NamedParameters">
            <summary>
            Governs the default behavior of the AseCommand objects associated with this connection.
            </summary>
            <remarks>
            This can be either set by the ConnectionString (NamedParameters='true'/'false') or the user can set it directly through an instance of AseConnection.
            </remarks>
        </member>
        <member name="T:AdoNetCore.AseClient.AseInfoMessageEventHandler">
            <summary>
            Represents the method that will handle the InfoMessage event of an AseConnection.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The AseInfoMessageEventArgs object that contains the event data.</param>
        </member>
        <member name="T:AdoNetCore.AseClient.TraceEnterEventHandler">
            <summary>
            Traces database activity within an application for debugging.
            </summary>
            <remarks>
            <para>Use TraceEnter and TraceExit events to hook up your own tracing method. This event is unique to an 
            instance of a connection. This allows different connections to be logged to different files. It can ignore 
            the event, or you can program it for other tracing. In addition, by using a .NET event, you can set up more 
            than one event handler for a single connection object. This enables you to log the event to both a window 
            and a file at the same time.</para>
            <para>Enable the ENABLETRACING connection property to trace Adaptive Server ADO.NET Data Provider activities. 
            It is disabled by default to allow for better performance during normal execution where tracing is not needed. 
            When this property is disabled, the TraceEnter and TraceExit events are not triggered, and tracing events are 
            not executed. You can configure ENABLETRACING in the connection string using these values: True – triggers the 
            TraceEnter and TraceExit events; and False – the default value; Adaptive Server ADO.NET Data Provider ignores 
            the TraceEnter and TraceExit events.</para>
            </remarks>
        </member>
        <member name="T:AdoNetCore.AseClient.TraceExitEventHandler">
            <summary>
            Traces database activity within an application for debugging.
            </summary>
            <remarks>
            <para>Use TraceEnter and TraceExit events to hook up your own tracing method. This event is unique to an 
            instance of a connection. This allows different connections to be logged to different files. It can ignore 
            the event, or you can program it for other tracing. In addition, by using a .NET event, you can set up more 
            than one event handler for a single connection object. This enables you to log the event to both a window 
            and a file at the same time.</para>
            <para>Enable the ENABLETRACING connection property to trace Adaptive Server ADO.NET Data Provider activities. 
            It is disabled by default to allow for better performance during normal execution where tracing is not needed. 
            When this property is disabled, the TraceEnter and TraceExit events are not triggered, and tracing events are 
            not executed. You can configure ENABLETRACING in the connection string using these values: True – triggers the 
            TraceEnter and TraceExit events; and False – the default value; Adaptive Server ADO.NET Data Provider ignores 
            the TraceEnter and TraceExit events.</para>
            </remarks>
        </member>
        <member name="T:AdoNetCore.AseClient.AseConnectionPool">
            <summary>
            Manages a pool of identical connections.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnectionPool.Size">
            <summary>
            The number of connections in the pool.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnectionPool.Available">
            <summary>
            The number of connections available in the pool.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseConnectionPoolManager">
            <summary>
            Manages all connection pools.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseConnectionPoolManager.GetConnectionPool(System.String)">
            <summary>
            Retrieves the connection pool that manages the connections for the specified connection string.
            </summary>
            <param name="connectionString">The connection string that identifies the pool to retrieve.</param>
            <returns>The connection pool that manages connectionString.</returns>
        </member>
        <member name="P:AdoNetCore.AseClient.AseConnectionPoolManager.NumberOfOpenConnections">
            <summary>
            The number of open connections in all of the connection pools.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseConnectionStringBuilder">
            <summary>
            Implementation of a connection string builder.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseDataAdapter">
            <summary>
            This types helps commit INSERT/UPDATE/DELETE operations from a <see cref="T:System.Data.DataSet"/> or <see cref="T:System.Data.DataTable"/> to the databae.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._cmdList">
            <summary>
            The commands that will be batached up for execution.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._isDisposed">
            <summary>
            Whether or not this is disposed.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._deleteCmd">
            <summary>
            The DELETE command template.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._insertCmd">
            <summary>
            The INSERT command template.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._selectCmd">
            <summary>
            The SELECT command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._updateCmd">
            <summary>
            The UPDATE command template.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDataAdapter._builder">
            <summary>
            An optional <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/> for use when generating the <see cref="P:AdoNetCore.AseClient.AseDataAdapter.DeleteCommand"/>, <see cref="P:AdoNetCore.AseClient.AseDataAdapter.InsertCommand"/>, and <see cref="P:AdoNetCore.AseClient.AseDataAdapter.UpdateCommand"/> respectively.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataAdapter.#ctor">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> instance.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataAdapter.#ctor(AdoNetCore.AseClient.AseCommand)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> instance.
            </summary>
            <param name="selectCommand">The SELECT command to initiaise with.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataAdapter.#ctor(System.String,AdoNetCore.AseClient.AseConnection)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> instance.
            </summary>
            <param name="selectCommandText">The SELECT command to initiaise with.</param>
            <param name="selectConnection">The <see cref="T:AdoNetCore.AseClient.AseConnection"/> to load data with.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> instance.
            </summary>
            <param name="selectCommandText">The SELECT command to initiaise with.</param>
            <param name="selectConnectionString">The connection to load data with.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataAdapter.Finalize">
            <summary>
            Desctructor function for an <see cref="T:AdoNetCore.AseClient.AseDataAdapter"/> instance.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.DeleteCommand">
            <summary>
            The DELETE command template.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
            <summary>
            The DELETE command template.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.InsertCommand">
            <summary>
            The INSERT command template.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
            <summary>
            The INSERT command template.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.SelectCommand">
            <summary>
            The SELECT command.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
            <summary>
            The SELECT command.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.UpdateCommand">
            <summary>
            The UPDATE command template.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
            <summary>
            The UPDATE command template.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.CommandBuilder">
            <summary>
            An optional <see cref="T:AdoNetCore.AseClient.AseCommandBuilder"/> for use when generating the <see cref="P:AdoNetCore.AseClient.AseDataAdapter.DeleteCommand"/>, <see cref="P:AdoNetCore.AseClient.AseDataAdapter.InsertCommand"/>, and <see cref="P:AdoNetCore.AseClient.AseDataAdapter.UpdateCommand"/> respectively.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataAdapter.UpdateBatchSize">
            <summary>
            Gets or sets the number of rows that are processed in each round-trip to the server.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseDataReader">
            <summary>
            ASE implementation of <see cref="T:System.Data.IDataReader"/>
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataReader.NextResult">
            <summary>
            Advances the reader to the next result set.
            </summary>
            <returns>true if the reader is pointing at a record set; false otherwise.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataReader.Read">
            <summary>
            Advance the reader to the next record in the current result set.
            </summary>
            <returns>true if the reader is pointing at a row of data; false otherwise.</returns>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataReader.WithinRow">
            <summary>
            Confirm that the reader is pointing at a row within a result set
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataReader.ValueExists(System.Int32)">
            <summary>
            Confirm that there is a value at the supplied index (does not confirm whether value is null or set)
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataReader.GetFormat(System.Int32)">
            <summary>
            From the current result set, get the FormatItem at the specified index.
            </summary>
            <returns>Returns the specified format item, or null</returns>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataReader.CurrentRowCount">
            <summary>
            Get the number of rows in the current result set, or 0 if there is no result set.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDataReader.CurrentRow">
            <summary>
            Get the current row, or null if there is none
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDataReader.DispatchMessages(System.Collections.Generic.IList{AdoNetCore.AseClient.Internal.MessageResult})">
            <summary>
            Send the messages to the event listener, removing them from the collection as they are sent.
            </summary>
            <param name="messages">The messages to dispatch.</param>
        </member>
        <member name="T:AdoNetCore.AseClient.AseDataReaderEnumerator">
            <summary>
            <see cref="T:System.Collections.IEnumerator"/> implementation for a an <see cref="T:AdoNetCore.AseClient.AseDataReader"/>.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseDataSourceEnumerator">
            <summary>
            Implementation of a data source enumerator.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseDbType">
            <summary>
            Specifies ASE datatypes. 
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseDecimal">
            <summary>
            AseDecimal represents a decimal or numeric number with a maximum precision of 38. AseDecimal implements IComparable interface.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MAXPRECISION">
            <summary>
            Maximum allowed precision is 38.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MAXSCALE">
            <summary>
            Maximum allowed scale is 38.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MAXLENGTH">
            <summary>
            Maximum DataLength is 33 bytes.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MAXOUTPUTPRECISION">
            <summary>
            Maximum output precision is 77.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MAXOUTPUTSCALE">
            <summary>
            Maximum output scale is 77.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MinValue">
            <summary>
            Minimum value is -99999999999999999999999999999999999999
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.MaxValue">
            <summary>
            Maximum value is 99999999999999999999999999999999999999
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.Zero">
            <summary>
            Zero is 0
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.PositiveOne">
            <summary>
            1
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.AseDecimal.NegativeOne">
            <summary>
            -1
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AseDecimal structure.
            </summary>
            <param name="precision">An Int32 value of the target precision.</param>
            <param name="scale">An Int32 value of the target scale.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.#ctor(AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Initializes a new instance of the AseDecimal structure.
            </summary>
            <param name="aseDecimal">An AseDecimal structure to initialize the value of the new AseDecimal.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the AseDecimal structure.
            </summary>
            <param name="precision">An Int32 value of the target precision.</param>
            <param name="scale">An Int32 value of the target scale.</param>
            <param name="value">The target value array in bytes.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the AseDecimal structure.
            </summary>
            <param name="value">A decimal structure to initialize the value of the new AseDecimal.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.Sign(AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Checks the sign of the AseDecimal value.
            </summary>
            <param name="value">The AseDecimal structure whose design is being checked.</param>
            <returns>Returns an integer 0 for null, 1 for positive, and -1 for a negative values respectively.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance of AseDecimal and the value indicated by the object value are equal.
            </summary>
            <param name="value">The object being tested for equality.</param>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDecimal.BytesRequired">
            <summary>
            get the number of bytes required to represent the value (caller should add 1 byte to represent sign byte)
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.op_Equality(AdoNetCore.AseClient.AseDecimal,AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Returns a value indicating whether two instances of AseDecimal are equal.
            </summary>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.op_LessThanOrEqual(AdoNetCore.AseClient.AseDecimal,AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Returns a value indicating if a is less than or equal to b.
            </summary>
            <returns>True if a is less than or equal to b.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.op_GreaterThanOrEqual(AdoNetCore.AseClient.AseDecimal,AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Returns a value indicating if a is greater than or equal to b.
            </summary>
            <returns>True if a is greater than or equal to b.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.op_LessThan(AdoNetCore.AseClient.AseDecimal,AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Returns a value indicating if a is less than b.
            </summary>
            <returns>True if a is less than b.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.op_GreaterThan(AdoNetCore.AseClient.AseDecimal,AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Returns a value indicating if a is greater than b.
            </summary>
            <returns>True if a is greater than b.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.Parse(System.String)">
            <summary>
            Parses a string value to an AseDecimal value.
            </summary>
            <param name="s">The string to be parsed into an AseDecimal value.</param>
            <returns>An AseDecimal structure representing the parsed string.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.GetHashCode">
            <summary>
            Returns a hashcode.
            </summary>
            <returns>An integer value representing the hashcode.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.CompareTo(System.Object)">
            <summary>
            Compares the value of this AseDecimal with the value of Object.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.CompareTo(AdoNetCore.AseClient.AseDecimal)">
            <summary>
            Compares the value of this AseDecimal with the AseDecimal value.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDecimal.IsNull">
            <summary>
            Returns true if this AseDecimal is a null value.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDecimal.IsNegative">
            <summary>
            Returns true if this AseDecimal is a negative value.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseDecimal.IsPositive">
            <summary>
            Returns true if this AseDecimal is a positive value.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.ToAseDecimal(System.Int32,System.Int32)">
            <summary>
            Converts this AseDecimal to new AseDecimal with specified precision and scale.
            </summary>
            <param name="outputPrecision">The target precision for the output</param>
            <param name="outputScale">The target scale for the output.</param>
            <returns>An AseDecimal structure with the specified precision and scale.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseDecimal.ToString">
            <summary>
            Returns a string representation of this AseDecimal.
            </summary>
            <returns>A string representation of this AseDecimal.</returns>
        </member>
        <member name="T:AdoNetCore.AseClient.AseError">
            <summary>
            Collects information relevant to a warning or error returned by the data source.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.MessageNumber">
            <summary>
            Number of the error message.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.Message">
            <summary>
            A short description of the error.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.SqlState">
            <summary>
            The Adaptive Server five-character SQL state following the ANSI SQL standard. If the error can 
            be issued from more than one place, the five-character error code identifies the source of the error.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseError.ToString">
            <summary>
            Identifies the complete text of the error message.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.State">
            <summary>
            The message state. Used as a modifier to the MsgNumber.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.Severity">
            <summary>
            The severity of the message.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.ServerName">
            <summary>
            The name of the server that is sending the message.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.ProcName">
            <summary>
            The name of the stored procedure or remote procedure call (RPC) in which the message occurred.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.LineNum">
            <summary>
            The line number in the command batch or the stored procedure that has the error, if applicable.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.Status">
            <summary>
            Associated with the extended message.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.TranState">
            <summary>
            The current state of any transactions that are active on this dialog.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.IsFromServer">
            <summary>
            The error message that comes from the Adaptive Server server.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.IsFromClient">
            <summary>
            The error message that comes from Adaptive Server ADO.NET Data Provider.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.IsError">
            <summary>
            The message is considered an error.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.IsWarning">
            <summary>
            The message is a warning that things might not be quite right.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseError.IsInformation">
            <summary>
            An informative message, providing information such as the active catalog has changed.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseErrorCollection">
            <summary>
            Collects all errors generated by Adaptive Server ADO.NET Data Provider.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseErrorCollection.Count">
            <summary>
            The number of errors in the collection.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the AseErrorCollection into an array, starting at the given index within the array.
            </summary>
            <param name="array">The array into which to copy the elements.</param>
            <param name="index">The starting index of the array.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseErrorCollection.GetEnumerator">
            <summary>
            Enumerates the errors in this collection.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseErrorCollection.Item(System.Int32)">
            <summary>
            The error at the specified index.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseErrorCollection.ArrangeErrors(AdoNetCore.AseClient.AseError[])">
            <summary>
            Return the most severe error first, and then everything else in original order
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseException">
            <summary>
            The exception that is thrown when ASE returns a warning or error. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseException.Errors">
            <summary>
            The error code identifying the error.
            </summary>
            <remarks>
            The AseErrorCollection class always contains at least one instance of the AseError class.
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseException.Message">
            <summary>
            This method returns the message of the most severe error.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseException.#ctor(System.String)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseException" /> instance.
            </summary>
            <param name="message">A message describing the error.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseException" /> instance.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="errorCode">The error code identifying the error.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseException.#ctor(AdoNetCore.AseClient.AseError[])">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseException" /> instance.
            </summary>
            <param name="errors">Error details</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseException" /> instance.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="inner">A deeper error that happened in the context of this error.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseException" /> instance.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="errorCode">The error code identifying the error.</param>
            <param name="inner">A deeper error that happened in the context of this error.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseException.#ctor(System.Exception,AdoNetCore.AseClient.AseError[])">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseException" /> instance.
            </summary>
            <param name="inner">A deeper error that happened in the context of this error.</param>
            <param name="errors">Error details</param>
        </member>
        <member name="T:AdoNetCore.AseClient.AseInfoMessageEventArgs">
            <summary>
            The event arguments passed to the InfoMessage event handlers.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseInfoMessageEventArgs.Errors">
            <summary>
            A collection of the actual error objects returned by the server.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseInfoMessageEventArgs.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseParameter">
            <summary>
            Represents a parameter to an <see cref="T:AdoNetCore.AseClient.AseCommand" />. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="value">An object that is the value of the parameter.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,AdoNetCore.AseClient.AseDbType)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,AdoNetCore.AseClient.AseDbType,System.Int32)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,AdoNetCore.AseClient.AseDbType,System.Int32,System.String)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,AdoNetCore.AseClient.AseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values.</param>
            <param name="isNullable"> true if the value of the field can be null; otherwise, false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which Value is resolved.</param>
            <param name="scale">The total number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values.</param>
            <param name="value">An object that is the value of the parameter.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,AdoNetCore.AseClient.AseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Int32,System.Int32,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values.</param>
            <param name="isNullable"> true if the value of the field can be null; otherwise, false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which Value is resolved.</param>
            <param name="scale">The total number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values.</param>
            <param name="value">An object that is the value of the parameter.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.String,AdoNetCore.AseClient.AseDbType,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="isNullable"> true if the value of the field can be null; otherwise, false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which Value is resolved.</param>
            <param name="scale">The total number of decimal places to which Value is resolved.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.Int32,AdoNetCore.AseClient.AseDbType)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterIndex">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.Int32,System.Object)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterIndex">The index of the parameter to add.</param>
            <param name="value">An object that is the value of the parameter.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.Int32,AdoNetCore.AseClient.AseDbType,System.Int32)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterIndex">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.Int32,AdoNetCore.AseClient.AseDbType,System.Int32,System.String)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterIndex">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.Int32,AdoNetCore.AseClient.AseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterIndex">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values.</param>
            <param name="isNullable"> true if the value of the field can be null; otherwise, false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which Value is resolved.</param>
            <param name="scale">The total number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values.</param>
            <param name="value">An object that is the value of the parameter.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameter.#ctor(System.Int32,AdoNetCore.AseClient.AseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Int32,System.Int32,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseParameter" />instance.
            </summary>
            <param name="parameterIndex">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values.</param>
            <param name="isNullable"> true if the value of the field can be null; otherwise, false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which Value is resolved.</param>
            <param name="scale">The total number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values.</param>
            <param name="value">An object that is the value of the parameter.</param>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.DbType">
            <summary>
            Gets or sets the <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.AseDbType">
            <summary>
            Gets or sets the <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of the parameter.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.Direction">
            <summary>
            Gets or sets a value that indicates whether the parameter is input-only, output-only, 
            bidirectional, or a stored procedure return value parameter.
            </summary>
            <remarks>
            <para>If the <see cref="T:System.Data.ParameterDirection" /> is output, and execution of the associated <see cref="T:AdoNetCore.AseClient.AseCommand" /> does 
            not return a value, the <see cref="T:AdoNetCore.AseClient.AseParameter" /> contains a null value.</para>
            <para><b>Output</b>, <b>InputOut</b>, and <b>ReturnValue</b> parameters returned by calling <see cref="M:AdoNetCore.AseClient.AseCommand.ExecuteReader" /> cannot 
            be accessed until you close the <see cref="T:AdoNetCore.AseClient.AseDataReader" />.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.IsNullable">
            <summary>
            Gets or sets a value that indicates whether the parameter accepts null values. IsNullable is not used to validate the 
            parameter’s value and will not prevent sending or receiving a null value when executing a command.
            </summary>
            <remarks>
            <para>Null values are handled using the <see cref="T:System.DBNull" /> class.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:AdoNetCore.AseClient.AseParameter" />.
            </summary>
            <remarks>
            <para>The ParameterName is specified in the form @paramname. You must set ParameterName before executing an 
            <see cref="T:AdoNetCore.AseClient.AseCommand" /> that relies on parameters.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.ParameterIndex">
            <summary>
            Gets or sets the index of the <see cref="T:AdoNetCore.AseClient.AseParameter" />.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.SourceColumn">
            <summary>
            Not supported yet. .NET Core 2.0 dependency.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <remarks>
            <para>For input parameters, the value is bound to the <see cref="T:AdoNetCore.AseClient.AseCommand" /> that is sent to the server. For output 
            and return value parameters, the value is set on completion of the <see cref="T:AdoNetCore.AseClient.AseCommand" /> and after the <see cref="T:AdoNetCore.AseClient.AseDataReader" /> 
            is closed.</para>
            <para>This property can be set to null or <see cref="F:System.DBNull.Value" />. Use <see cref="F:System.DBNull.Value" /> to send a NULL 
            value as the value of the parameter. Use null or do not set Value to use the default value for the parameter.</para>
            <para>An exception is thrown if non-Unicode XML data is passed as a string.</para>
            <para>If the application specifies the database type, the bound value is converted to that type when the provider sends the 
            data to the server. The provider tries to convert any type of value if it supports the <see cref="T:System.IConvertible" /> 
            interface. Conversion errors may result if the specified type is not compatible with the value.</para>
            <para>The <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> property can be inferred by setting the Value.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.Precision">
            <summary>
            Gets or sets the number of digits used to represent the <see cref="P:AdoNetCore.AseClient.AseParameter.Value" /> property.
            </summary>
            <remarks>
            <para>The Precision property is used by parameters that have a <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of <see cref="T:System.Decimal" />.</para>
            <para>You do not need to specify values for the <see cref="P:AdoNetCore.AseClient.AseParameter.Precision" /> and <see cref="P:AdoNetCore.AseClient.AseParameter.Scale" /> properties for input parameters, as they can be 
            inferred from the parameter value. Precision and Scale are required for output parameters and for scenarios where 
            you need to specify complete metadata for a parameter without indicating a value, such as specifying a null value 
            with a specific precision and scale.</para>
            <para>Use of this property to coerce data passed to the database is not supported. To round, truncate, or otherwise coerce data before 
            passing it to the database, use the <see cref="T:System.Math" /> class that is part of the System namespace prior to assigning a value to 
            the parameter's <see cref="P:AdoNetCore.AseClient.AseParameter.Value" /> property.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which <see cref="P:AdoNetCore.AseClient.AseParameter.Value" /> is resolved.
            </summary>
            <remarks>
            <para>The Scale property is used by parameters that have a <see cref="P:AdoNetCore.AseClient.AseParameter.AseDbType" /> of <see cref="T:System.Decimal" />.</para>
            <para>Data may be truncated if the Scale property is not explicitly specified and the data on the server does not fit 
            in scale 0 (the default).</para>
            <para>You do not need to specify values for the <see cref="P:AdoNetCore.AseClient.AseParameter.Precision" /> and <see cref="P:AdoNetCore.AseClient.AseParameter.Scale" /> properties for input parameters, as they can be 
            inferred from the parameter value. Precision and Scale are required for output parameters and for scenarios where 
            you need to specify complete metadata for a parameter without indicating a value, such as specifying a null value 
            with a specific precision and scale.</para>
            <para>Use of this property to coerce data passed to the database is not supported. To round, truncate, or otherwise coerce data before 
            passing it to the database, use the <see cref="T:System.Math" /> class that is part of the System namespace prior to assigning a value to 
            the parameter's <see cref="P:AdoNetCore.AseClient.AseParameter.Value" /> property.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
            <remarks>
            <para>Return values are not affected by this property; return parameters from stored procedures are always fixed-size integers.</para>
            <para>For output parameters with a variable length type (nvarchar, for example), the size of the parameter defines the size of the 
            buffer holding the output parameter. The output parameter can be truncated to a size specified with Size. For character types, the 
            size specified with Size is in characters.</para>
            <para>The Size property is used for binary and string types. For parameters of type <see cref="T:System.String" />, Size means length in Unicode 
            characters. For parameters of type <see cref="F:System.Data.DbType.Xml" />, Size is ignored.</para>
            <para>For nonstring data types and ANSI string data, the Size property refers to the number of bytes. For Unicode string data, Size refers 
            to the number of characters. The count for strings does not include the terminating character.</para>
            <para>For variable-length data types, Size describes the maximum amount of data to transmit to the server. For example, for a Unicode 
            string value, Size could be used to limit the amount of data sent to the server to the first one hundred characters.</para>
            <para>If not explicitly set, the size is inferred from the actual size of the specified parameter value.</para>
            <para>If the fractional part of the parameter value is greater than the size, then the value will be truncated to match the size.</para>
            <para>For fixed length data types, the value of Size is ignored. It can be retrieved for informational purposes, and returns the 
            maximum amount of bytes the provider uses when transmitting the value of the parameter to the server. </para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.CanSendOverTheWire">
            <summary>
            Indicates if this parameter can be sent to the server (normal:true),
            or if it's an abstraction over return values (ParameterDirection.ReturnValue:false)
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameter.IsOutput">
            <summary>
            Indicates if this parameter will have an output value
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseParameterCollection">
            <summary>
            Represents a collection of parameters associated with an <see cref="T:AdoNetCore.AseClient.AseCommand" />. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseParameterCollection.Count">
            <summary>
            Represents the number of <see cref="T:AdoNetCore.AseClient.AseParameter" /> objects in the collection.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Contains(System.String)">
            <summary>
            Determines whether the specified parameter name is in this <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns><b>true</b> if the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> contains the value; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Contains(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:AdoNetCore.AseClient.AseParameter" /> is in this <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" />.</param>
            <returns><b>true</b> if the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> contains the value; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Contains(AdoNetCore.AseClient.AseParameter)">
            <summary>
            Determines whether the specified <see cref="T:AdoNetCore.AseClient.AseParameter" /> is in this <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" />.</param>
            <returns><b>true</b> if the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> contains the value; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the <see cref="T:AdoNetCore.AseClient.AseParameter" /> with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The <see cref="T:AdoNetCore.AseClient.AseParameter" /> with the specified name.</returns>
            <remarks>
            <para>The <i>parameterName</i> is used to look up the index value in the underlying <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />. 
            If the <i>parameterName</i> is not valid, an <see cref="T:System.IndexOutOfRangeException" /> will be thrown.</para>
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:AdoNetCore.AseClient.AseParameter" /> with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The parameter.</param>
            <remarks>
            <para>The <i>parameterName</i> is used to look up the index value in the underlying <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />. 
            If the <i>parameterName</i> is not valid, an <see cref="T:System.IndexOutOfRangeException" /> will be thrown.</para>
            </remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.String,AdoNetCore.AseClient.AseDbType)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.String,AdoNetCore.AseClient.AseDbType,System.Int32)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
            <remarks>This overload is useful when you are adding a parameter of a variable-length data type such as <b>varchar</b> or <b>binary</b>.</remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.String,AdoNetCore.AseClient.AseDbType,System.Int32,System.String)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
            <remarks>This overload is useful when you are adding a parameter of a variable-length data type such as <b>varchar</b> or <b>binary</b>.</remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.String,AdoNetCore.AseClient.AseDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values.</param>
            <param name="isNullable"> true if the value of the field can be null; otherwise, false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which Value is resolved.</param>
            <param name="scale">The total number of decimal places to which Value is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values.</param>
            <param name="value">An object that is the value of the parameter.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
            <remarks>This overload is useful when you are adding a parameter of a variable-length data type such as <b>varchar</b> or <b>binary</b>.</remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(AdoNetCore.AseClient.AseParameter)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="parameter">The <see cref="T:AdoNetCore.AseClient.AseParameter" /> to add.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.Int32,AdoNetCore.AseClient.AseDbType)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="index">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.Int32,System.Object)">
            <summary>
            Adds a value to the end of the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="index">The index of the parameter to add.</param>
            <param name="parameterValue">The value to be added. Use <see cref="F:System.DBNull.Value" /> instead of null, to indicate a null value.</param>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.Int32,AdoNetCore.AseClient.AseDbType,System.Int32)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="index">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
            <remarks>This overload is useful when you are adding a parameter of a variable-length data type such as <b>varchar</b> or <b>binary</b>.</remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.Int32,AdoNetCore.AseClient.AseDbType,System.Int32,System.String)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> given the parameter name and the data type.
            </summary>
            <param name="index">The index of the parameter to add.</param>
            <param name="dbType">The <see cref="T:AdoNetCore.AseClient.AseDbType" /> of the parameter to add.</param>
            <param name="size">The size as <see cref="T:System.Int32" />.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>A new <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
            <remarks>This overload is useful when you are adding a parameter of a variable-length data type such as <b>varchar</b> or <b>binary</b>.</remarks>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an <see cref="T:System.Array"/> of <see cref="T:AdoNetCore.AseClient.AseParameter"/> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection"/>.
            </summary>
            <param name="values">The items to add.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.AddRange(AdoNetCore.AseClient.AseParameter[])">
            <summary>
            Adds an array of <see cref="T:AdoNetCore.AseClient.AseParameter"/> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection"/>.
            </summary>
            <param name="values">The items to add.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a value to the end of the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterValue">The value to be added. Use <see cref="F:System.DBNull.Value" /> instead of null, to indicate a null value.</param>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a value to the end of the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterValue">The value to be added. Use <see cref="F:System.DBNull.Value" /> instead of null, to indicate a null value.</param>
            <returns>An <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Add(System.Object)">
            <summary>
            Adds an <see cref="T:AdoNetCore.AseClient.AseParameter" /> to the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" /> to add.</param>
            <returns>The index of the <see cref="T:AdoNetCore.AseClient.AseParameter" /> object.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the specified <see cref="T:AdoNetCore.AseClient.AseParameter" /> with the specified name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The zero-based location of the specified <see cref="T:AdoNetCore.AseClient.AseParameter" /> with the specified case-sensitive name. 
            Returns -1 when the object does not exist in the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of the specified <see cref="T:AdoNetCore.AseClient.AseParameter" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" />.</param>
            <returns>The zero-based location of the specified <see cref="T:AdoNetCore.AseClient.AseParameter" />. 
            Returns -1 when the object does not exist in the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.IndexOf(AdoNetCore.AseClient.AseParameter)">
            <summary>
            Gets the location of the specified <see cref="T:AdoNetCore.AseClient.AseParameter" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" />.</param>
            <returns>The zero-based location of the specified <see cref="T:AdoNetCore.AseClient.AseParameter" />. 
            Returns -1 when the object does not exist in the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an <see cref="T:AdoNetCore.AseClient.AseParameter" /> in the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="parameter">The <see cref="T:AdoNetCore.AseClient.AseParameter" /> object to add to the collection.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Insert(System.Int32,AdoNetCore.AseClient.AseParameter)">
            <summary>
            Inserts an <see cref="T:AdoNetCore.AseClient.AseParameter" /> in the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="parameter">The <see cref="T:AdoNetCore.AseClient.AseParameter" /> object to add to the collection.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Remove(System.Object)">
            <summary>
            Removes the <see cref="T:AdoNetCore.AseClient.AseParameter" /> from the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" /> object to remove from the collection.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.Remove(AdoNetCore.AseClient.AseParameter)">
            <summary>
            Removes the <see cref="T:AdoNetCore.AseClient.AseParameter" /> from the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" />.
            </summary>
            <param name="value">The <see cref="T:AdoNetCore.AseClient.AseParameter" /> object to remove from the collection.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the <see cref="T:AdoNetCore.AseClient.AseParameter" /> from the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> at the specified parameter name.
            </summary>
            <param name="parameterName">The name of the parameter to remove.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:AdoNetCore.AseClient.AseParameter" /> from the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the parameter to remove.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies <see cref="T:AdoNetCore.AseClient.AseParameter" /> objects from the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> to the specified array.
            </summary>
            <param name="array">The array into which to copy the AseParameter objects.</param>
            <param name="index">The starting index of the array.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.CopyTo(AdoNetCore.AseClient.AseParameter[],System.Int32)">
            <summary>
            Copies <see cref="T:AdoNetCore.AseClient.AseParameter" /> objects from the <see cref="T:AdoNetCore.AseClient.AseParameterCollection" /> to the specified array.
            </summary>
            <param name="array">The array into which to copy the AseParameter objects.</param>
            <param name="index">The starting index of the array.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.AseParameterCollection.GetEnumerator">
            <summary>
            Enumerates the <see cref="T:AdoNetCore.AseClient.AseParameter" /> objects.
            </summary>
            <returns>The <see cref="T:AdoNetCore.AseClient.AseParameter" /> objects.</returns>
        </member>
        <member name="T:AdoNetCore.AseClient.AseRowUpdatedEventArgs">
            <summary>
            Event Args class for use with the <see cref="T:AdoNetCore.AseClient.AseRowUpdatedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseRowUpdatingEventArgs">
            <summary>
            Event Args class for use with the <see cref="T:AdoNetCore.AseClient.AseRowUpdatingEventHandler"/> delegate.
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.AseRowUpdatingEventHandler">
            <summary>
            Delegate definition for when a row changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The change.</param>
        </member>
        <member name="T:AdoNetCore.AseClient.AseTransaction">
            <summary>
            Represents a transaction against a SAP ASE database. This class cannot be inherited
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseTransaction.#ctor(System.Data.IDbConnection,System.Data.IsolationLevel)">
            <summary>
            Constructor function for an <see cref="T:AdoNetCore.AseClient.AseTransaction"/> instance.
            </summary>
            <param name="connection">The <see cref="P:AdoNetCore.AseClient.AseTransaction.AseConnection"/> that initiated this <see cref="T:AdoNetCore.AseClient.AseTransaction"/>.</param>
            <param name="isolationLevel">The <see cref="P:AdoNetCore.AseClient.AseTransaction.IsolationLevel"/> to apply to the transaction.</param>
            <exception cref="T:System.ArgumentException">Thrown in the provided <paramref name="isolationLevel"/> is not an isolation level supported by ASE.</exception>
        </member>
        <member name="P:AdoNetCore.AseClient.AseTransaction.Connection">
            <summary>
            The <see cref="P:AdoNetCore.AseClient.AseTransaction.AseConnection"/> that initiated this <see cref="T:AdoNetCore.AseClient.AseTransaction"/>.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.AseTransaction.IsolationLevel">
            <summary>
            The <see cref="P:AdoNetCore.AseClient.AseTransaction.IsolationLevel"/> to apply to the transaction.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseTransaction.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseTransaction.Dispose(System.Boolean)">
            <summary>
            Disposes of the <see cref="T:AdoNetCore.AseClient.AseTransaction"/>. Will implicitly rolls back the transaction if it has not already been rolled back or committed.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.AseTransaction.Rollback">
            <summary>
            Rolls back the transaction.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_UNSET">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_FULLY_QUALIFIED_CLASS_NAME">
            <summary>
            The fully qualified name of the class (“com.foo.Bar”).
            This is a Character String in the negotiated TDS character set currently in use on this connection.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_INT32_CLASS_ID">
            <summary>
            4-byte integer (database ID) 4-byte integer(sysextypes number of this class definition in this database).
            Both integers are in the byte-ordering negotiated for this connection.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_LONGCHAR">
            <summary>
            This is long character data and has no ClassID associated with it
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_LONGBINARY">
            <summary>
             This is long binary data and has no ClassID associated with it.
            Appears in ribo as BLOB_VARBINARY
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_UNICHAR">
            <summary>
            This is unichar data with no ClassID associated with it.
            Appears in ribo as BLOB_UTF16
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_NONE">
            <summary>
            No Status
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_EOM">
            <summary>
            This is the last buffer in a request or a response.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_ATTNACK">
            <summary>
            This is an acknowledgment to the last received attention.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_ATTN">
            <summary>
            This is an attention request buffer.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_EVENT">
            <summary>
            This is an event notification buffer.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_SEAL">
            <summary>
            The buffer is encrypted
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferStatus.TDS_BUFSTAT_ENCRYPT">
            <summary>
            The buffer is encrypted (SQL Anywhere CMDSEQ protocol)
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Enum.BufferType">
            <summary>
            Refer: Table 51: Buffer Types
            Informs the recipient of what type of buffer/message/packet (terminology?) they're receiving.
            The recipient may use this information to expect the sender to send certain tokens.
            Most are obsolete in TDS 5.0, so to start we will [Obsolete] most of them.
            As we implement the protocol, if we need to remove the [Obsolete], we will.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_NONE">
            <summary>
            None
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_LANG">
            <summary>
            The buffer contains a language command. TDS does not specify the syntax of the language command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_LOGIN">
            <summary>
            The buffer contains a login record
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_RPC">
            <summary>
            The buffer contains a remote procedure call command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_RESPONSE">
            <summary>
            The buffer contains the response to a command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_UNFMT">
            <summary>
            The buffer contains raw unformatted data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_ATTN">
            <summary>
            The buffer contains a non-expedited attention request.
            Refer: 12. Cancel Protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_BULK">
            <summary>
            The buffer contains bulk binary data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_SETUP">
            <summary>
            A protocol request to setup another logical channel. This buffer is a header only and does not contain any data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_CLOSE">
            <summary>
            A protocol request to close a logical channel. This buffer is a header only and does not contain any data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_ERROR">
            <summary>
            A resource error was detected while attempting to setup or use a logical channel. This buffer is a header only and does not contain any data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_PROTACK">
            <summary>
            A protocol acknowledgment associated with the logical channel windowing protocol. This buffer is a header only and does not contain any data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_ECHO">
            <summary>
            A protocol request to echo the data contained in the buffer.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_LOGOUT">
            <summary>
            A protocol request to logout an active logical channel. This buffer is a header only and does not contain any data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_ENDPARAM">
            <summary>
            What is this??? (Reference pdf asks this question)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_NORMAL">
            <summary>
            This packet contains a tokenized TDS request or response.
            Note: Introduced in TDS 5.0, this obsoletes a lot of the other TDS_BUF_ enums
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_URGENT">
            <summary>
            This packet contains an urgent tokenized TDS request or response.
            Refer: Event Notifications
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_MIGRATE">
            <summary>
            This packet contains a migration protocol message. Currently these are only TDS_MSG tokens.
            Refer: 26. Migration Protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_CMDSEQ_NORMAL">
            <summary>
            SQL Anywhere CMDSEQ protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_CMDSEQ_LOGIN">
            <summary>
            SQL Anywhere CMDSEQ protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_CMDSEQ_LIVENESS">
            <summary>
            SQL Anywhere CMDSEQ protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_CMDSEQ_RESERVED1">
            <summary>
            SQL Anywhere CMDSEQ protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.BufferType.TDS_BUF_CMDSEQ_RESEVERD2">
            <summary>
            SQL Anywhere CMDSEQ protocol
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Enum.LSecLogin">
            <summary>
            Flags related to secure login
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.LSecLogin.TDS_SEC_LOG_ENCRYPT">
            <summary>
            Password encryption - proprietary scheme
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.LSecLogin.TDS_SEC_LOG_ENCRYPT2">
            <summary>
            Password encryption - RSA key?
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.LSecLogin.TDS_SEC_LOG_ENCRYPT3">
            <summary>
            Password encryption - RSA key + ???
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.ParameterFormatItemStatus.TDS_PARAM_RETURN">
            <summary>
            This is a return parameter. It is like a parameter passed by reference.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.ParameterFormatItemStatus.TDS_PARAM_COLUMNSTATUS">
            <summary>
            This parameter will have a columnstatus byte in its corresponding TDS_PARAM token. Note that it will be a protocol error for this bit to be set when the TDS_DATA_COLUMNSTATUS capability bit is off.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.ParameterFormatItemStatus.TDS_PARAM_NULLALLOWED">
            <summary>
            This parameter can be NULL
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_HIDDEN">
            <summary>
            This is a hidden column.
            It was not listed in the target list of the select statement.
            Hidden fields are often used to pass key information back to a client.
            For example: select a, b from table T where columns b and c are the key columns.
            Columns a, b, and c may be returned and c would have a status of TDS_ROW_HIDDEN|TDS_ROW_KEY.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_KEY">
            <summary>
            This indicates that this column is a key.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_VERSION">
            <summary>
            This column is part of the version key for a row. It is used when updating rows through cursors.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_COLUMNSTATUS">
            <summary>
            All rows in this column will contain the columnstatus byte. Note that it will be a protocol error to set this bit if the TDS_DATA_COLUMNSTATUS capability bit is off.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_UPDATABLE">
            <summary>
            This column is updatable.It is used with cursors.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_NULLALLOWED">
            <summary>
            This column allows nulls.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_IDENTITY">
            <summary>
            This column is an identity column.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.RowFormatItemStatus.TDS_ROW_PADCHAR">
            <summary>
            This column has been padded with blank characters.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.SerializationType.SER_DEFAULT">
            <summary>
            Use the default serialization associated with the specified <see cref="T:AdoNetCore.AseClient.Enum.BlobType"/>.
            Allowed cases:
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_LONGCHAR"/> -  Characters are in their native format, the character set of the data is the same as that of all other character data as negotiated on the connection during login.
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_LONGBINARY"/> - Binary data in its normal form
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_UNICHAR"/> - This is unichar data with normal UTF-16 encoding with byte-order identical to that of the client
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.SerializationType.SER_SPECIAL1">
            <summary>
            Allowed cases:
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_FULLY_QUALIFIED_CLASS_NAME"/> - Native Java Serialization
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_INT32_CLASS_ID"/> - Native Java Serialization
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_UNICHAR"/> - This is unichar data in its UTF-8 encoding.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.SerializationType.SER_SPECIAL2">
            <summary>
            Allowed cases:
            <see cref="F:AdoNetCore.AseClient.Enum.BlobType.BLOB_UNICHAR"/> - This is unichar data in SCSU (compressed) encoding
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_BINARY">
            <summary>
            Fixed Nullable Converted Description
            Yes No No Binary
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_BIT">
            <summary>
            Fixed Nullable Converted Description
            Yes No No Bit
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_BLOB">
            <summary>
            Fixed Nullable Converted Description
            No Yes No Serialized Object
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_BOUNDARY">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Boundary
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_CHAR">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Character
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_DATE">
            <summary>
            Fixed Nullable Converted Description
            Yes No No Date
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_DATEN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Date
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_DATETIME">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Date/time
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_DATETIMEN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Date/time
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_DECN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Decimal
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_FLT4">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Float
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_FLT8">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Float
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_FLTN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Float
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_IMAGE">
            <summary>
            Fixed Nullable Converted Description
            No Yes No Image
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_INT1">
            <summary>
            Fixed Nullable Converted Description
            Yes No No Unsigned Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_INT2">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_INT4">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_INT8">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_INTERVAL">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Time Interval
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_INTN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_LONGBINARY">
            <summary>
            Fixed Nullable Converted Description
            No Yes No Binary
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_LONGCHAR">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Character
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_MONEY">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Money
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_MONEYN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Money
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_NUMN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Numeric
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_SENSITIVITY">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Sensitivity
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_SHORTDATE">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Date/time
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_SHORTMONEY">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Money
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_SINT1">
            <summary>
            Fixed Nullable Converted Description
            Yes No No Signed Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_TEXT">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Text
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_TIME">
            <summary>
            Fixed Nullable Converted Description
            Yes No No Time
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_TIMEN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Time
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_UINT2">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Unsigned Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_UINT4">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Unsigned Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_UINT8">
            <summary>
            Fixed Nullable Converted Description
            Yes No Yes Unsigned Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_UINTN">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Unsigned Integer
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_UNITEXT">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Unicode UTF-16 Text
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_VARBINARY">
            <summary>
            Fixed Nullable Converted Description
            No Yes No Binary
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_VARCHAR">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes Character
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_VOID">
            <summary>
            Fixed Nullable Converted Description
            N/A N/A N/A Void (unknown)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_XML">
            <summary>
            Fixed Nullable Converted Description
            No Yes Yes XML
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TdsDataType.TDS_BIGDATETIMEN">
            <summary>
            Fixed Nullable Converted Description (these are guesses)
            No Yes Yes Date/Time
            Note: As far as I can tell, this uses the same encoding mechanism as DATETIME still 8 bytes...
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Enum.TokenType">
            <summary>
            Refer: TDS Token List
            Tokens are the lifeblood of the TDS request/response.
            A token represents a chunk of information, like a SQL statement, a parameter list, or a cursor declaration.
            A token type (byte) comes before each chunk, so we know how to read the next bytes.
            
            Note: some token types are mentioned in the spec as not yet implemented, and others as obsolete.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TranState.TDS_NOT_IN_TRAN">
            <summary>
            Not currently in a transaction
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TranState.TDS_TRAN_SUCCEED">
            <summary>
            Request caused transaction to complete successfully.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TranState.TDS_TRAN_PROGRESS">
            <summary>
            A transaction is still in progress on this dialog.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TranState.TDS_STMT_ABORT">
            <summary>
            Request caused a statement abort to occur.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Enum.TranState.TDS_TRAN_ABORT">
            <summary>
            Request caused transaction to abort.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IConnectionPool.Reserve(AdoNetCore.AseClient.Interface.IInfoMessageEventNotifier)">
            <summary>
            Attempt to reserve an internal connection in the pool for use.
            Event notifier must be provided so that messages emitted by the server during login can be captured externally
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IConnectionPool.Release(AdoNetCore.AseClient.Interface.IInternalConnection)">
            <summary>
            Release a used internal connection back into the pool for reuse or replacement
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IConnectionPool.PoolSize">
            <summary>
            The number of connections in the pool.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IConnectionPool.Available">
            <summary>
            The number of connections available in the pool.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.Created">
            <summary>
            Marks when the connection was 'officially' created
            * 'officially' being whatever the factory decides is appropriate, such as "after login is complete"
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.LastActive">
            <summary>
            Marks when the connection's socket was last active
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.Ping">
            <summary>
            Try to send a packet to the server and read the response. Report the result back
            </summary>
            <returns>true if the ping succeeded, false otherwise</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.ChangeDatabase(System.String)">
            <summary>
            Change the current connection/session to the desired database
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.Database">
            <summary>
            Get the current connection/session's database
            Note: this value is cached, and is whatever the server last reported
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.DataSource">
            <summary>
            Get the current connection/session's data source (server name/address)
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.ServerVersion">
            <summary>
            Get the current connection/session's server version
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.ExecuteNonQuery(AdoNetCore.AseClient.AseCommand,AdoNetCore.AseClient.AseTransaction)">
            <summary>
            Internal implementation of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/>
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.ExecuteNonQueryTaskRunnable(AdoNetCore.AseClient.AseCommand,AdoNetCore.AseClient.AseTransaction)">
            <summary>
            Internal implementation of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/>,
            but the result is wrapped in a Task to allow the caller to check IsCanceled
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.ExecuteReader(System.Data.CommandBehavior,AdoNetCore.AseClient.AseCommand,AdoNetCore.AseClient.AseTransaction)">
            <summary>
            Internal implementation of <see cref="M:System.Data.IDbCommand.ExecuteReader"/>
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.ExecuteReaderTaskRunnable(System.Data.CommandBehavior,AdoNetCore.AseClient.AseCommand,AdoNetCore.AseClient.AseTransaction)">
            <summary>
            Internal implementation of <see cref="M:System.Data.IDbCommand.ExecuteReader"/>,
            but the result is wrapped in a Task to allow the caller to check IsCanceled
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.ExecuteScalar(AdoNetCore.AseClient.AseCommand,AdoNetCore.AseClient.AseTransaction)">
            <summary>
            Internal implementation of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/>
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.Cancel">
            <summary>
            Cancel the currently running command
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.SetTextSize(System.Int32)">
            <summary>
            Set @@textsize, useful if the caller needs to select out very large text data
            </summary>
            <param name="textSize">The new maximum in bytes</param>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.SetAnsiNull(System.Boolean)">
            <summary>
            Set ANSI NULL behaviour for the connection.
            </summary>
            <param name="enabled">When true, the ANSI NULL behaviour will be enabled.</param>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.NamedParameters">
            <summary>
            Governs the default behavior of the AseCommand objects associated with this connection.
            </summary>
            <remarks>
            This can be either set by the ConnectionString (NamedParameters='true'/'false') or the user can set it directly through an instance of AseConnection.
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.IsDoomed">
            <summary>
            Indicates if this connection is doomed to destruction
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.IsDisposed">
            <summary>
            Indicates if this connection has already been disposed
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.StatisticsEnabled">
            <summary>
            Indicates if statistics for this connection are enabled;
            Allows for statistics collection to be enabled/disabled
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnection.RetrieveStatistics">
            <summary>
            Fetch statistics for this connection, if enabled
            </summary>
            <returns>An <see cref="T:System.Collections.IDictionary"/> which should under-the-hood map statistic names <see cref="T:System.String"/> to statistic values <see cref="T:System.Int64"/></returns>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IInternalConnection.EventNotifier">
            <summary>
            The 'caller event' notifier for the connection
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IInternalConnectionFactory.GetNewConnection(System.Threading.CancellationToken,AdoNetCore.AseClient.Interface.IInfoMessageEventNotifier)">
            <summary>
            Create a new internal connection, ready to use.
            If cancellation is requested, this will discard any work done and throw an OperationCancelledException
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Interface.IPacket.Status">
            <summary>
            Status flags to send over the wire
            If no flags to send, should equal BufferStatus.TDS_BUFSTAT_NONE
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Interface.IPacket.Write(System.IO.Stream,AdoNetCore.AseClient.Internal.DbEnvironment)">
            <summary>
            Write this packet to a stream, do not worry about packet chunking, that'll happen later
            </summary>
            <param name="stream">Stream to write to</param>
            <param name="env"></param>
        </member>
        <member name="T:AdoNetCore.AseClient.Interface.ITokenReader">
            <summary>
            Read out tokens from a bunch of bytes
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Internal.BigDecimal">
            <summary>
            Arbitrary precision decimal.
            All operations are exact, except for division. Division never determines more digits than the given precision.
            Source: https://gist.github.com/JcBernack/0b4eef59ca97ee931a2f45542b9ff06d
            Based on https://stackoverflow.com/a/4524254
            Author: Jan Christoph Bernack (contact: jc.bernack at gmail.com)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.BigDecimal.AlwaysTruncate">
            <summary>
            Specifies whether the significant digits should be truncated to the given precision after each operation.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.BigDecimal.MaxTruncationPrecision">
            <summary>
            Sets the maximum precision of division operations.
            If AlwaysTruncate is set to true all operations are affected.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.BigDecimal.Mantissa">
            <summary>
            Underlying value, stored as a bigint.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.BigDecimal.Exponent">
            <summary>
            Exponent associated with the underlying value.
            Should always be 0 or negative
            Used to translate the BigInteger back into something with decimal places using formula Mantissa * 10^Exponent.
            e.g. 9999 * 10^-3 => 9.999
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.BigDecimal.Normalize">
            <summary>
            Removes trailing zeros on the mantissa
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.BigDecimal.Truncate(System.Int32)">
            <summary>
            Truncate the number to the given precision by removing the least significant digits.
            </summary>
            <returns>The truncated number</returns>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.BigDecimal.AlignExponent(AdoNetCore.AseClient.Internal.BigDecimal,AdoNetCore.AseClient.Internal.BigDecimal)">
            <summary>
            Returns the mantissa of value, aligned to the exponent of reference.
            Assumes the exponent of value is larger than of reference.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.BigDecimal.InsertDecimalPoint(System.Text.StringBuilder)">
            <summary>
            Once the string is of the correct length (padded with 0s if necessary), then insert the decimal point
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.ConnectionPool.PoolSize">
            <summary>
            The number of connections in the pool.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.ConnectionPool.Available">
            <summary>
            The number of connections available in the pool.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.ConnectionPoolManager.GetConnectionPool(System.String)">
            <summary>
            Gets a connection by connectionString.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.ConnectionPoolManager.NumberOfOpenConnections">
            <summary>
            The number of open connections in all of the connection pools.
            </summary>
        </member>
        <member name="E:AdoNetCore.AseClient.Internal.EventNotifier.InfoMessage">
            <summary>
            Occurs when Adaptive Server ADO.NET Data Provider sends a warning or an informational message.
            </summary>
            <remarks>
            The event handler receives an argument of type AseInfoMessageEventArgs containing data related to this event. 
            The Errors and Message properties provide information specific to this event.
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.Internal.EventNotifier.StateChange">
            <summary>
            Occurs when the state of the connection changes.
            </summary>
            <remarks>
            The event handler receives an argument of StateChangeEventArgs with data related to this event. Two StateChangeEventArgs properties 
            provide information specific to this event: CurrentState and OriginalState.
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.Internal.EventNotifier.TraceEnter">
            <summary>
            Traces database activity within an application for debugging.
            </summary>
            <remarks>
            <para>Use TraceEnter and TraceExit events to hook up your own tracing method. This event is unique to an 
            instance of a connection. This allows different connections to be logged to different files. It can ignore 
            the event, or you can program it for other tracing. In addition, by using a .NET event, you can set up more 
            than one event handler for a single connection object. This enables you to log the event to both a window 
            and a file at the same time.</para>
            <para>Enable the ENABLETRACING connection property to trace Adaptive Server ADO.NET Data Provider activities. 
            It is disabled by default to allow for better performance during normal execution where tracing is not needed. 
            When this property is disabled, the TraceEnter and TraceExit events are not triggered, and tracing events are 
            not executed. You can configure ENABLETRACING in the connection string using these values: True – triggers the 
            TraceEnter and TraceExit events; and False – the default value; Adaptive Server ADO.NET Data Provider ignores 
            the TraceEnter and TraceExit events.</para>
            </remarks>
        </member>
        <member name="E:AdoNetCore.AseClient.Internal.EventNotifier.TraceExit">
            <summary>
            Traces database activity within an application for debugging.
            </summary>
            <remarks>
            <para>Use TraceEnter and TraceExit events to hook up your own tracing method. This event is unique to an 
            instance of a connection. This allows different connections to be logged to different files. It can ignore 
            the event, or you can program it for other tracing. In addition, by using a .NET event, you can set up more 
            than one event handler for a single connection object. This enables you to log the event to both a window 
            and a file at the same time.</para>
            <para>Enable the ENABLETRACING connection property to trace Adaptive Server ADO.NET Data Provider activities. 
            It is disabled by default to allow for better performance during normal execution where tracing is not needed. 
            When this property is disabled, the TraceEnter and TraceExit events are not triggered, and tracing events are 
            not executed. You can configure ENABLETRACING in the connection string using these values: True – triggers the 
            TraceEnter and TraceExit events; and False – the default value; Adaptive Server ADO.NET Data Provider ignores 
            the TraceEnter and TraceExit events.</para>
            </remarks>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.FormatItem.Precision">
            <summary>
            Relates to TDS_NUMN and TDS_DECN
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.FormatItem.Scale">
            <summary>
            Relates to TDS_NUMN and TDS_DECN
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.FormatItem.DisplayColumnName">
            <summary>
            Get the most appropriate column name to display to the driver user.
            Preference is to the Label/Alias (e.g. "some_alias" from "select some_column as some_alias")
            If no Label/Alias, then just use whatever value the underlying column name has.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.FormatItem.BlobType">
            <summary>
            Relates to TDS_BLOB
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.FormatItem.ClassId">
            <summary>
            Relates to TDS_BLOB
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.FormatItem.SerializationType">
            <summary>
            Relates to TDS_BLOB
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Internal.SqlDecimal">
            <summary>
            Represents a fixed precision and scale numeric value between -10<superscript term='38'/>
            -1 and 10<superscript term='38'/> -1 to be stored in or retrieved from a database.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.SqlDecimal.BytesRequired">
            <summary>
            get the number of bytes required to represent the value (caller should add 1 byte to represent sign byte)
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.StreamWriteExtensions.WritePaddedString(System.IO.Stream,System.String,System.Int32,System.Text.Encoding,System.Int32)">
            <summary>
            Encode and write-out the string, up to the maximum length. Pad any remaining bytes. Append string length byte.
            If lengthModifier is supplied, it will be added to the appended length value.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.StreamWriteExtensions.WriteMoney(System.IO.Stream,System.Decimal)">
            <summary>
            Write a money value to the stream
            Note: will always write the 8-byte TDS equivalent (long)
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Internal.TokenReceiveStream">
            <summary>
            The TokenReceiveStream is a read-only stream that can read token data from packets coming from the network. 
            </summary>
            <remarks>
            <para>The design goal of the token stream is to support reading from the network in a lazy fashion so that the
            ASE server can return info messages as they occur, rather than once all data has been received.
            This is particularly important for large data sets, or long running server commands.</para>
            <para>The lifecycle of the <see cref="T:AdoNetCore.AseClient.Internal.TokenReceiveStream"/> should be one request or one response.</para>
            </remarks>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._environment">
            <summary>
            The network stream to read data from.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._isDisposed">
            <summary>
            Whether or not this has been disposed.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._headerReadBuffer">
            <summary>
            A buffer to store header information from the TDS packets. This data is read and discarded by the <see cref="T:AdoNetCore.AseClient.Internal.TokenReceiveStream"/>.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._bodyReadBuffer">
            <summary>
            A buffer to data that has been read by the <see cref="T:AdoNetCore.AseClient.Internal.TokenReceiveStream"/>, but not returned to the client.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._bodyReadBufferPosition">
            <summary>
            A pointer to the next byte that should be read from the <see cref="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._bodyReadBuffer"/>.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._bodyReadBufferLength">
            <summary>
            The number of data bytes that are in the <see cref="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._bodyReadBuffer"/>.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._readBufferHasBytes">
            <summary>
            Whether or not the <see cref="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._bodyReadBuffer"/> has data in it to read.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._innerStreamHasBytes">
            <summary>
            Whether or not the <see cref="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._innerStream"/> has data in it to read.
            </summary>
        </member>
        <member name="P:AdoNetCore.AseClient.Internal.TokenReceiveStream.DataAvailable">
            <summary>
            Whether or not there is data available to read.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._innerStream">
            <summary>
            The stream decorated by this type. Data is ultimately read from and written to the inner stream.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._headerReadBufferLength">
            <summary>
            The length of the <see cref="F:AdoNetCore.AseClient.Internal.TokenReceiveStream._headerReadBuffer"/>.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.TokenReceiveStream.BurnPackets">
            <summary>
            It is possible that the caller doesn't process all of the data returned to the socket.
            This method reads and discards all data, leaving the socket in a ready state for the next request.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.TokenReceiveStream.BufferBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Ensure that the requested bytes have been received. The base <see cref="T:System.Net.Sockets.NetworkStream"/> will
            block until at least one byte is available, but not necessarily wait for all of the requested
            bytes.
            </summary>
            <param name="buffer">The buffer to fill.</param>
            <param name="offset">The position within the buffer to write data into.</param>
            <param name="count">The number of bytes.</param>
        </member>
        <member name="T:AdoNetCore.AseClient.Internal.TokenSendStream">
            <summary>
            The TokenSendStream is a write-only stream that can send packets to the network. 
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenSendStream._environment">
            <summary>
            The network stream to read data from.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenSendStream._isDisposed">
            <summary>
            Whether or not this has been disposed.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenSendStream._innerStream">
            <summary>
            The stream decorated by this type. Data is ultimately read from and written to the inner stream.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenSendStream._innerWriteBufferStream">
            <summary>
            When writing data, it is buffered first and then written out as chunks during <see cref="M:AdoNetCore.AseClient.Internal.TokenSendStream.Flush"/>.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenSendStream._writeBufferType">
            <summary>
            The type of write response to send.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Internal.TokenSendStream._writeBufferStatus">
            <summary>
            The default status of the packets to send.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.TokenSendStream.SetBufferType(AdoNetCore.AseClient.Enum.BufferType,AdoNetCore.AseClient.Enum.BufferStatus)">
            <summary>
            Sets the type of buffer for write operations.
            </summary>
            <param name="type">The type of buffer being written.</param>
            <param name="status">The default status of the buffer.</param>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.TypeMap.CleanupAseDbType(AdoNetCore.AseClient.AseDbType)">
            <summary>
            When a parameter's type is set, this will be called to "clean it up".
            In particular, the reference driver treats DateTime and BigDateTime as the same value (and both are transmitted as a TDS_BIGDATETIMEN type), so we should do the same.
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Internal.ValueReader.ReadTDS_LONGBINARY(System.IO.Stream,AdoNetCore.AseClient.Internal.FormatItem,AdoNetCore.AseClient.Internal.DbEnvironment)">
            <summary>
            TDS_LONGBINARY serialization 55 serialized java object or instance (i.e. java object)
            TDS_LONGBINARY serialized java class 56 serialized java class (i.e. byte code)
            TDS_LONGBINARY smallbinary 59 64K max length binary data (ASA)
            TDS_LONGBINARY unichar 34 fixed length UTF-16 encoded data
            TDS_LONGBINARY univarchar 35 variable length UTF-16 encoded data
            </summary>
        </member>
        <member name="M:AdoNetCore.AseClient.Token.CatchAllToken.CalculateRemainingLength(System.IO.Stream)">
            <summary>
            The token's length or the length of its remaining length indicator is encoded in the token's type.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.BLOB_NCHAR_SCSU">
            <summary>
            Support for BLOB subtype 0x05 (unichar) with serialization type2.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.BLOB_NCHAR_8">
            <summary>
            Support for BLOB subtype 0x05 (unichar) with serialization type 1.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.BLOB_NCHAR_16">
            <summary>
            Support for BLOB subtype 0x05 (unichar) with serialization type 0.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.IMAGE_NCHAR">
            <summary>
            Support for IMAGE data containing UTF-16 encoded data (usertype 36).
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.DATA_NLBIN">
            <summary>
            Support for LONGBINARY data containing UTF-16 encoded data (usertypes 34 and 35)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.CUR_IMPLICIT">
            <summary>
            Support for TDS_CUR_DOPT_IMPLICIT cursor declare option.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request5.DATA_UINTN">
            <summary>
            Support for NULL unsigned integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.DATA_UINT8">
            <summary>
            Support for unsigned 8-byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.DATA_UINT4">
            <summary>
            Support for unsigned 4-byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.DATA_UINT2">
            <summary>
            Support for unsigned 2-byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.REQ_RESERVED2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.WIDETABLE">
            <summary>
            The client may send requests using the CURDECLARE2, DYNAMIC2, PARAMFMT2 tokens.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.REQ_RESERVED1">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.OBJECT_BINARY">
            <summary>
            Streaming Binary data
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request6.DATA_COLUMNSTATUS">
            <summary>
            Indicates that a one-byte status field proceeds any length or data (etc.) for every
            column within a row using TDS_ROW or TDS_PARAMS
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.OBJECT_CHAR">
            <summary>
            Support Streaming character data
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.OBJECT_JAVA1">
            <summary>
            Support Serialized Java Objects
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.DOL_BULK">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.DATA_VOID">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.DATA_INT8">
            <summary>
            Support 8 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.DATA_BITN">
            <summary>
            Support NULL bits
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.DATA_FLTN">
            <summary>
            Support NULL floats
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request7.PROTO_DYNPROC">
            <summary>
            Pre-pend “create proc” to dynamic prepare statements
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.PROTO_DYNAMIC">
            <summary>
            Use DESCIN/DESCOUT dynamic protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.DATA_BOUNDARY">
            <summary>
            Support boundary security data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.DATA_SENSITIVITY">
            <summary>
            Support sensitivity security data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.REQ_URGEVT">
            <summary>
            Use new event notification protocol
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.PROTO_BULK">
            <summary>
            Support tokenized bulk copy (not supported this release - TDS 5.0)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.PROTO_TEXT">
            <summary>
            Support tokenized text and image (not supported in this release - TDS 5.0)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.CON_LOGICAL">
            <summary>
            Support logical logout (not supported in this release - TDS 5.0)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request8.CON_INBAND">
            <summary>
            Support non-expedited attentions
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CON_OOB">
            <summary>
            Support expedited attentions.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CSR_MULTI">
            <summary>
            Support multi-row fetch cursor commands
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CSR_REL">
            <summary>
            Support fetch specified relative row cursor commands
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CSR_ABS">
            <summary>
            Support fetch specified absolute row cursor commands
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CSR_LAST">
            <summary>
            Support fetch last row cursor commands
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CSR_FIRST">
            <summary>
            Support fetch first row cursor commands
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.CSR_PREV">
            <summary>
            Support fetch previous cursor commands
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request9.DATA_MONEYN">
            <summary>
            Support NULL money
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_DATETIMEN">
            <summary>
            Support NULL date/time
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_INTN">
            <summary>
            Support NULL integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_LBIN">
            <summary>
            Support long variable length binary data types.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_LCHAR">
            <summary>
            Support long variable length character data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_DEC">
            <summary>
            Support decimal data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_IMAGE">
            <summary>
            Support image data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_TEXT">
            <summary>
            Support text data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request10.DATA_NUM">
            <summary>
            Support numeric data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_FLT8">
            <summary>
            Support 8 byte floating point data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_FLT4">
            <summary>
            Support 4 byte floating point data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_DATE4">
            <summary>
            Support 4 byte date/time data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_DATE8">
            <summary>
            Support 8 byte date/time data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_MNY4">
            <summary>
            Support 4 byte money data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_MNY8">
            <summary>
            Support 8 byte money data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_VBIN">
            <summary>
            Support variable length binary data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request11.DATA_BIN">
            <summary>
            Support fixed length binary data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.DATA_VCHAR">
            <summary>
            Support variable length character data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.DATA_CHAR">
            <summary>
            Support fixed length character data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.DATA_BIT">
            <summary>
            Support bit data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.DATA_INT4">
            <summary>
            Support 4 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.DATA_INT2">
            <summary>
            Support 2 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.DATA_INT1">
            <summary>
            Support 1 byte unsigned integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.REQ_PARAM">
            <summary>
            RPC requests will use the TDS_DBRPC token and TDS_PARAMFMT/TDS_PARAM to send parameters.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request12.REQ_MSG">
            <summary>
            TDS_MSG requests.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_DYNF">
            <summary>
            Dynamic SQL requests.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_CURSOR">
            <summary>
            Cursor command requests.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_BCP">
            <summary>
            Bulk copy requests.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_MSTMT">
            <summary>
            Support multiple commands per request.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_EVT">
            <summary>
            Registered procedure event notifications.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_RPC">
            <summary>
            RPC Requests.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Request13.REQ_LANG">
            <summary>
            Language requests.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response7.BLOB_NONCHAR_SCSU">
            <summary>
            No Support for BLOB subtype 0x05/2.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response7.BLOB_NONCHAR_8">
            <summary>
            No Support for BLOB subtype 0x05/1.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response7.BLOB_NONCHAR_16">
            <summary>
            No Support for BLOB subtype 0x05/0.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.IMAGE_NONCHAR">
            <summary>
            No Support for IMAGE data containing UTF-16 encoded data (usertype 36).
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.DATA_NONLBIN">
            <summary>
            No Support for LONGBINARY data containing UTF-16 encoded data (usertypes 34 and 35)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.NO_WIDETABLES">
            <summary>
            Client cannot process the ORDERBY2, PARAMFMT2, and ROWFMT2 tokens required to support tables
            with a LARGE number of columns. The server should not send them.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.DATA_NOUINTN">
            <summary>
            No Support for NULL unsigned integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.DATA_NOUINT8">
            <summary>
            No Support for unsigned 8-byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.DATA_NOUINT4">
            <summary>
            No Support for unsigned 4-byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.DATA_NOUINT2">
            <summary>
            No Support for unsigned 2-byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response8.RES_RESERVED1">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.OBJECT_NOBINARY">
            <summary>
            No Streaming Binary data
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.DATA_NOZEROLEN">
            <summary>
            No Support for 0-length non-null strings
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.OBJECT_NOCHAR">
            <summary>
            No Support Streaming character data
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.OBJECT_NOJAVA1">
            <summary>
            No Support Serialized Java Objects
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.DATA_NOINT8">
            <summary>
            No support for 8 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.RES_NOSTRIPBLANKS">
            <summary>
            Do not strip blank from fixed length character data
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.RES_NOTDSDEBUG">
            <summary>
            No support for TDS_DEBUG token. Use image data instead.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response9.DATA_NOBOUNDARY">
            <summary>
            No support for the security boundary data type
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.DATA_NOSENSITIVITY">
            <summary>
            No support for the security sensitivity data type
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.PROTO_NOBULK">
            <summary>
            No support for tokenized bulk copy
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.PROTO_NOTEXT">
            <summary>
            No support for tokenized text and image.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.CON_NOINBAND">
            <summary>
            No support for non-expedited attentions
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.CON_NOOOB">
            <summary>
            No support for expedited attentions
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.DATA_NOMONEYN">
            <summary>
            No support for nullable money data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.DATA_NODATETIMEN">
            <summary>
            No support for nullable date/time data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response10.DATA_NOINTN">
            <summary>
            No support for nullable integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NOLBIN">
            <summary>
            No support for long variable length binary data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NOLCHAR">
            <summary>
            No support for long variable length character data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NODEC">
            <summary>
            No support for decimal data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NOIMAGE">
            <summary>
            No support for image data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NOTEXT">
            <summary>
            No support for text data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NONUM">
            <summary>
            No support for numeric data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NOFLT8">
            <summary>
            No support for 8 byte float data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response11.DATA_NOFLT4">
            <summary>
            No support for 4 byte float data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NODATE4">
            <summary>
            No support for 4 byte date/time data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NODATE8">
            <summary>
            No support for 8 byte date/time data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NOMNY4">
            <summary>
            No support for 4 byte money data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NOMNY8">
            <summary>
            No support for 8 byte money data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NOVBIN">
            <summary>
            No support for variable length binary data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NOBIN">
            <summary>
            No support for fixed length binary data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NOVCHAR">
            <summary>
            No support for variable length character data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response12.DATA_NOCHAR">
            <summary>
            No support for fixed length character data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.DATA_NOBIT">
            <summary>
            No support for bit data types
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.DATA_NOINT4">
            <summary>
            No support for 4 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.DATA_NOINT2">
            <summary>
            No support for 2 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.DATA_NOINT1">
            <summary>
            No support for 1 byte integers
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.RES_NOPARAM">
            <summary>
            No support for TDS_PARAM/TDS_PARAMFMT for return parameter. use TDS_RETURNVALUE to return parameters to this client.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.RES_NOEED">
            <summary>
            No support for TDS_EED token
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.ClientCapabilityToken.Response13.RES_NOMSG">
            <summary>
            No support for TDS_MSG results
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_FINAL">
            <summary>
            This is the final result for the last command. It indicates that the command has completed successfully.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_MORE">
            <summary>
            This Status indicates that there are more results to follow for the current command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_ERROR">
            <summary>
            This indicates that an error occurred on the current command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_INXACT">
            <summary>
            There is a transaction in progress for the current request.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_PROC">
            <summary>
            This TDS_DONE is from the results of a stored procedure.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_COUNT">
            <summary>
            This Status indicates that the count argument is valid. This bit is used to distinguish between an empty count field and a count field with a value of 0
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_ATTN">
            <summary>
            This TDS_DONE is acknowledging an attention command.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.DoneToken.DoneStatus.TDS_DONE_EVENT">
            <summary>
            This TDS_DONE was generated as part of an event notification.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.LoginAckToken.LoginStatus.TDS_LOG_SUCCEED">
            <summary>
            The login request completed successfully.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.LoginAckToken.LoginStatus.TDS_LOG_FAIL">
            <summary>
            The login request failed. The client must terminate the dialog and restart to attempt another login request.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.LoginAckToken.LoginStatus.TDS_LOG_NEGOTIATE">
            <summary>
            The server is requesting that the client complete a negotiation before completing the login request. The login negotiation is done using the TDS_MSG token.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_ENCRYPT">
            <summary>
            Start encrypted login protocol.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_LOGPWD">
            <summary>
            Sending encrypted user password.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_REMPWD">
            <summary>
            Sending remote server passwords.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_CHALLENGE">
            <summary>
            Start challenge/response protocol.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_RESPONSE">
            <summary>
            Returned encrypted challenge.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_GETLABEL">
            <summary>
            Start trusted user login protocol.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_LABEL">
            <summary>
            Return security labels.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SQL_TBLNAME">
            <summary>
            CS_MSG_TABLENAME
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_GW_RESERVED">
            <summary>
            Used by interoperability group.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_OMNI_CAPABILITIES">
            <summary>
            Used by OMNI SQL Server.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_OPAQUE">
            <summary>
            Send opaque security token.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_HAFAILOVER">
            <summary>
            Used during login to obtain the HA Session ID
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_EMPTY">
            <summary>
            Sometimes a MSG response stream is required by TDS syntax, but the sender has no real information to pass. This message type indicates that the following paramfmt/param streams are meaningless
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_ENCRYPT2">
            <summary>
            Start alternate encrypted password protocol.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_LOGPWD2">
            <summary>
            Return alternate encrypted pass-words.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_SUP_CIPHER">
            <summary>
            Returns list of supported ciphers.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_MIG_REQ">
            <summary>
            Initiate client connection migration to alternative server via address pro-vided as message parameter.Table 48: Reserved Message IdentifiersDefineValueClient VisibleDescription
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_MIG_SYNC">
            <summary>
            Client sends to acknowledge receipt of TDS_MSG_MIG_REQ.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_MIG_CONT">
            <summary>
            Server sends to start actual client migration to alternate server.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_MIG_IGN">
            <summary>
            Server sends to abort previous TDS_MSG_MIG_REQ.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_MIG_FAIL">
            <summary>
            Client sends to original server to indicate that the migration attempt failed. Optional parameter indicates failure reason.Table 48: Reserved Message IdentifiersDefineValueClient VisibleDescription
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_ENCRYPT3">
            <summary>
            Start alternate alternate encrypted password protocol.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_LOGPWD3">
            <summary>
            Return alternate alternate encrypted pass-words.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.MessageToken.MsgId.TDS_MSG_SEC_REMPWD3">
            <summary>
            Return alternate alternate encrypted remote pass-word.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.CommandType.TDS_OPT_SET">
            <summary>
            Set an option.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.CommandType.TDS_OPT_DEFAULT">
            <summary>
            Set option to its default value.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.CommandType.TDS_OPT_LIST">
            <summary>
            Request current setting of a specific option.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.CommandType.TDS_OPT_INFO">
            <summary>
            Report current setting of a specific option.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_UNUSED">
            <summary>
            Used to specify no option.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_DATEFIRST">
            <summary>
            Set first day of week.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_TEXTSIZE">
            <summary>
            Set maximum text size.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_STAT_TIME">
            <summary>
            Return server time statistics.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_STAT_IO">
            <summary>
            Return server I/O statistics.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_ROWCOUNT">
            <summary>
            Set maximum row count to return.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_NATLANG">
            <summary>
            Change national language.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_DATEFORMAT">
            <summary>
            Set date format.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_ISOLATION">
            <summary>
            Transaction isolation level.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_AUTHON">
            <summary>
            Set authority level on.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CHARSET">
            <summary>
            Change character set.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_SHOWPLAN">
            <summary>
            Show execution plan.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_NOEXEC">
            <summary>
            Do not execute query.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_ARITHIGNOREON">
            <summary>
            Set arithmetic exception handling.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_ARITHABORTON">
            <summary>
            Set arithmetic abort handling.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_PARSEONLY">
            <summary>
            Parse the query only. Return error messages.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_GETDATA">
            <summary>
            Return trigger data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_NOCOUNT">
            <summary>
            Do not return done count.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_FORCEPLAN">
            <summary>
            Forces substitution order for joins in the order of the tables provided in this option.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_FORMATONLY">
            <summary>
            Send format information only.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CHAINXACTS">
            <summary>
            Set chained transaction mode.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CURCLOSEONXACT">
            <summary>
            Close all open cursors at end of transaction.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_FIPSFLAG">
            <summary>
            Enable FIPs flagging.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_RESTREES">
            <summary>
            Return resolution trees.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_IDENTITYON">
            <summary>
            Turn on explicit identity.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CURREAD">
            <summary>
            Set session label @@curread.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CURWRITE">
            <summary>
            Set session label @@curwrite.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_IDENTITYOFF">
            <summary>
            Turn off explicit identity.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_AUTHOFF">
            <summary>
            Turn authority off.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_ANSINULL">
            <summary>
            Support ANSI null data.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_QUOTED_IDENT">
            <summary>
            Quoted identifiers.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_ANSIPERM">
            <summary>
            Check permissions on search columns for update clause.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_STR_RTRUNC">
            <summary>
            ANSI string right trunc.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_SORTMERGE">
            <summary>
            Set Sort-Merge for session.
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_JTC">
            <summary>
            Set JTC for session
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CLIENTREALNAME">
            <summary>
            Set Client Real Name
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CLIENTHOSTNAME">
            <summary>
            Set Client Host Name
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CLIENTAPPLNAME">
            <summary>
            Set Client Application Name
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_IDENTITYUPD_ON">
            <summary>
            Turn on explicit update identity on table
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_IDENTITYUPD_OFF">
            <summary>
            Turn off explicit update identity on table
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_NODATA">
            <summary>
            Turn on/off “nodata”option
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_CIPHERTEXT">
            <summary>
            Turn on/off ciphertext (column encryption)
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_SHOW_FI">
            <summary>
            Expose Functional Indexes
            </summary>
        </member>
        <member name="F:AdoNetCore.AseClient.Token.OptionCommandToken.OptionType.TDS_OPT_HIDE_VCC">
            <summary>
            Hide/Show Virtual Computed Columns
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Token.ParameterFormatCommonToken">
            <summary>
            Refer: p. 285 TDS_PARAMFMT and p. 289 TDS_PARAMFMT2
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Token.ParametersToken">
            <summary>
            Refer: p. 291 TDS_PARAMS
            </summary>
        </member>
        <member name="T:AdoNetCore.AseClient.Token.RowToken">
            <summary>
            Refer: p. 303 TDS_ROW
            </summary>
        </member>
    </members>
</doc>
